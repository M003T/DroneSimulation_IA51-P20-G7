package io.sarl.airsim.behaviors.target

import fr.utbm.airsim.api.Pose
import io.sarl.airsim.influences.MoveByVelocity
import io.sarl.airsim.influences.RotateToYaw
import io.sarl.airsim.influences.Takeoff
import io.sarl.airsim.math.Vector3
import io.sarl.airsim.math.Vector4
import io.sarl.airsim.perceptions.LidarDataPerception
import io.sarl.airsim.perceptions.sim.SimGroundTruthKinematicsPerception
import io.sarl.airsim.perceptions.sim.SimPosePerception
import io.sarl.airsim.simulation.events.SimulationInitialized
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Logging
import io.sarl.core.Schedules

/** 
 * This is our own drone behavior which is supposed to enable them to set a target location to reach while avoiding obstacles and then return to the base
 * @author Malek Fardeau
 */

behavior ReachLocationWithObstacleAvoidance {
	
	uses Logging, DefaultContextInteractions, Schedules
	
	// Constantes
	val periodMs : int = 1000
	val randomTargetLocationRange : float = 100f
	val distanceError : float = 1f
	val degreeError : float = 3f
	val velocityScalingValue = 6f
	val accelerationWhenAvoiding : float = 1.5f
	
	// Variables
	protected var position : Vector3 = null
	protected var orientation : Vector3 = null
	protected var speed : Vector3 = null
	protected var initiallocation : Vector3 = null
	protected var targetlocation : Vector3 = null
	protected var lidarData : float[] = null

	//For loop behavior when the simulation starts
	on SimulationInitialized {
		emit(new Takeoff) //Emit takeoff event to notify the SimulationControllerAgent
		
		in(5000) [ // Initial delay before starting
			this.initiallocation = new Vector3(this.position.x,this.position.y,0f)
			//this.targetlocation = new Vector3(40f, 0f, 0f)
			this.targetlocation = generateTargetLocation() //We generate a random target location
			info("My target location is : " + this.targetlocation.x + ", " + this.targetlocation.y + ", 0")
			
			every(periodMs) [ //Period at which we reevaluate the drone actions
				val movementForce : Vector3 = computeForce() // Create a force vector for the movement
				
				emit(new MoveByVelocity(movementForce.getX(), movementForce.getY(), movementForce.getZ(), periodMs/1000f))
			]
		]
		
	}
	
	//Update SARL position and orientation when a PosePerception is received from Airsim
	on SimPosePerception {
		val positionPerceived : Pose = occurrence.pose //We retrieve the position perceived from Airsim
		this.position = new Vector3(positionPerceived.position)
		val quaternion : Vector4 = new Vector4(positionPerceived.orientation.x, positionPerceived.orientation.y,positionPerceived.orientation.z, positionPerceived.orientation.w)
		this.orientation = quaternion.toEulerAngles()
	}

	//Update SARL velocity when a KinematicsPerception is received from Airsim
	on SimGroundTruthKinematicsPerception {
		val velocity : Vector3 = new Vector3(occurrence.state.linearVelocity)
		this.speed = velocity
	}

	// Update SARL LidarData when a LidarDataPerception is received from Airsim
	on LidarDataPerception {
		val lidarPointCloud : float[] = occurrence.lidarData.pointCloud
		this.lidarData = lidarPointCloud
	}

	//Function that computes the force to move the drone
	def computeForce() : Vector3 {
		//We copy the variables to avoid problems with parallel execution
		var result : Vector3 = new Vector3
		val position : Vector3 = new Vector3(this.position)
		val orientationz : float = Math.toDegrees(this.orientation.z as double)as float

		info("My position : " + position.x + ", " + position.y + ", " + position.z + ". My orientation : " + orientationz)
		if ((position.x < (this.targetlocation.x + distanceError)) && //Test if we reached the target location
		(position.x > (this.targetlocation.x - distanceError)) &&
		(position.y < (this.targetlocation.y + distanceError)) &&
		(position.y > (this.targetlocation.y - distanceError))) 
		{
			if(position.z < (1 - distanceError)) { //If we need to descend
				info("I'm landing")
				result = generateVelocity(0f,0f,1f)
			}
			else { //If we are arrived, we generate a new location
				if((this.targetlocation.x == this.initiallocation.x) && (this.targetlocation.y == this.initiallocation.y)) { //If we are back to base we generate a new random location
					info("I'm back to base, I go to a new location")
					this.targetlocation = generateTargetLocation()
				}
				else {
					info("I'm arrived, I go back to base")
					this.targetlocation = this.initiallocation
				}
			}
		}
		else if (position.z > -2) { //If we need to ascend
			info("I ascend")
			result = generateVelocity(0f,0f,-1f)
		}
		else {
			val pointToAvoid : Vector3 = computePointsToAvoid()
			if ((pointToAvoid.x != 0f) || (pointToAvoid.y != 0f) || (pointToAvoid.z != 0f)) { // If we need to avoid an obstacle
				var distance : Vector3 = new Vector3()
				distance = pointToAvoid - position
				var velocity : Vector3 = generateVelocity(distance.x,distance.y,distance.z)
				result = new Vector3(-accelerationWhenAvoiding * velocity.x, -accelerationWhenAvoiding * velocity.y,-0.5f * velocity.z) // We want to go the opposite direction fast and diminish the z influence
				info("I avoid the obstacle with a force : " + result.x + ", " + result.y + ", " + result.z)
			}
			else {
				var distance : Vector3 = new Vector3()
				distance = this.targetlocation - position
				var angletohave : float = Math.toDegrees(Math.atan2(-distance.y as double, -distance.x as double)) as float

				if (((orientationz < (angletohave + degreeError)) && (orientationz > (angletohave - degreeError)))) { // If we are in line with the target we move forward
					info("I move in direction of the target location")
					result = generateVelocity(distance.x, distance.y, 0f,true)
				} 
				else { // Else we rotate to be in line with the target
					info("I rotate of to be in line with the target location : " + angletohave)
					emit(new RotateToYaw(angletohave))
				}
			}
		}
		return result
	}

	def computePointsToAvoid() : Vector3 {
		var result : Vector3 = new Vector3(0f, 0f, 0f)
		
		val lidarPointCloud : float[] = this.lidarData
		var lidarSize : int = lidarPointCloud.size
		if (lidarSize >= 3) { // If we detected an obstacle with lidar
			var meanPoint : float[] = #[lidarPointCloud.get(0),lidarPointCloud.get(1),lidarPointCloud.get(2)]
			for (var i = 3;i<lidarSize;i++) { //We compute the mean of all the points detected
				meanPoint.set(i%3,meanPoint.get(i%3)+lidarPointCloud.get(i))
			}
			lidarSize = lidarSize/3
			val pointToAvoid : Vector3 = new Vector3(meanPoint.get(0)/lidarSize, meanPoint.get(1)/lidarSize, meanPoint.get(2)/lidarSize)
			info("I've go an obstacle to avoid : " + pointToAvoid.x + ", " + pointToAvoid.y + ", " + pointToAvoid.z)
			this.lidarData = null // To not recompute old LidarData
			result = pointToAvoid
		}
		return result
	}
	
	def generateVelocity(x : float,y : float, z : float, diminishwhenclose : boolean = false) : Vector3 { //This function is used to generate a scaled velocity value from a distance to a point
		var result : Vector3 = null
		
		val sum : float = Math.abs(x) + Math.abs(y) + Math.abs(z)
		if ((sum < 10*this.distanceError) && (diminishwhenclose == true)) { //If we are really close to the target location we want to go slower
			result = new Vector3(x/sum,y/sum,z)
		}
		else { //Else we scale the values
			result = new Vector3((x/sum)*this.velocityScalingValue,(y/sum)*this.velocityScalingValue,(z/sum)*this.velocityScalingValue)
		}
		return result
	}
	
	def generateTargetLocation() : Vector3 {
		return new Vector3(((Math.random() * randomTargetLocationRange * 2) - randomTargetLocationRange) as float,((Math.random() * randomTargetLocationRange * 2) - randomTargetLocationRange) as float, 0f) 	// We generate a random location
	}
}